/*
A note about my CSS conventions
I use :where() on everything to reset the specificity so I can set the order in terms of order in the code and with CSS layers.
*/

@layer css-reset {
	:where( body, body * ) {
		/* prevent horizontal
		scrollbars with
		width: 100%; */
		box-sizing: border-box;
	}
}

@layer optional-stuff {
	:where(canvas, body *) {
		border: 1px solid black;
	}

	:where(canvas) { }

	:where(#canvas-wrapper) {
		/* changing canvas.style.width/height (CSS pixels)
		squashes the aspect ratio, but changing the
		canvas.setAttribute('width', ...)
		and height HTML attributes (HTML canvas pixels)
		preserves it.
		I use ResizeObserver() on the #canvas-wrapper
		element with the Three.js renderer.setSize(...)
		function to set both the CSS width/height
		and the HTML Canvas width/height. */
		
		/* the width and height get overwritten by
		the resize, if the user drags the widget */
		width: 500px;
		height: 300px;
		overflow: scroll;
		resize: both;
	}
}